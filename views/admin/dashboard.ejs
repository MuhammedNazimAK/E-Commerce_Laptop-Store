<%- include("../partials/admin/header") %>
<%- include("../partials/admin/search") %>

<section class="content-main">
    <div class="content-header">
        <div>
            <h2 class="content-title card-title">Dashboard</h2>
            <p>Whole data about your business here</p>
        </div>
        <div>
            <a href="/admin/sales-report" class="btn btn-primary"><i class="text-muted material-icons md-post_add"></i>Create report</a>
        </div>
    </div>
    <div class="row">
        <div class="col-lg-3">
            <div class="card card-body mb-4">
                <article class="icontext">
                    <span class="icon icon-sm rounded-circle bg-primary-light"><i class="text-primary material-icons md-monetization_on"></i></span>
                    <div class="text">
                        <h6 class="mb-1 card-title">Revenue</h6>
                        <span id="totalRevenue">Loading...</span>
                        <span class="text-sm">
                            Shipping fees are not included
                        </span>
                    </div>
                </article>
            </div>
        </div>
        <div class="col-lg-3">
            <div class="card card-body mb-4">
                <article class="icontext">
                    <span class="icon icon-sm rounded-circle bg-success-light"><i class="text-success material-icons md-local_shipping"></i></span>
                    <div class="text">
                        <h6 class="mb-1 card-title">Orders</h6>
                        <span id="totalOrders">Loading...</span>
                        <span class="text-sm">
                            Excluding orders in transit
                        </span>
                    </div>
                </article>
            </div>
        </div>
        <div class="col-lg-3">
            <div class="card card-body mb-4">
                <article class="icontext">
                    <span class="icon icon-sm rounded-circle bg-warning-light"><i class="text-warning material-icons md-qr_code"></i></span>
                    <div class="text">
                        <h6 class="mb-1 card-title">Products</h6>
                        <span id="totalProducts">Loading...</span>
                        <span class="text-sm">
                            In multiple categories
                            <!-- In <span id="totalCategories">Loading...</span> Categories -->
                        </span>
                    </div>
                </article>
            </div>
        </div>
        <div class="col-lg-3">
            <div class="card card-body mb-4">
                <article class="icontext">
                    <span class="icon icon-sm rounded-circle bg-info-light"><i class="text-info material-icons md-shopping_basket"></i></span>
                    <div class="text">
                        <h6 class="mb-1 card-title">Monthly Earning</h6>
                        <span id="monthlyEarning">Loading...</span>
                        <span class="text-sm">
                            Based on your local time.
                        </span>
                    </div>
                </article>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-xl-8 col-lg-12">
            <div class="card mb-4">
                <article class="card-body">
                    <h5 class="card-title">Sale statistics</h5>
                    <div class="mb-3">
                        <select id="salesChartFilter" class="form-select">
                            <option value="yearly">Yearly</option>
                            <option value="monthly">Monthly</option>
                            <option value="weekly">Weekly</option>
                            <option value="daily">Daily</option>
                        </select>
                    </div>
                    <canvas id="salesChart" height="120px"></canvas>
                    <div id="additionalStats" class="mt-4"></div>
                </article>
            </div>
        </div>        
        <div class="col-xl-4 col-lg-12">
            <div class="card mb-4">
                <article class="card-body">
                    <h5 class="card-title">Top 10 Lists</h5>
                    <ul class="nav nav-tabs" id="topListsTabs" role="tablist">
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="products-tab" data-bs-toggle="tab" data-bs-target="#products" type="button" role="tab" aria-controls="products" aria-selected="true">Products</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="categories-tab" data-bs-toggle="tab" data-bs-target="#categories" type="button" role="tab" aria-controls="categories" aria-selected="false">Categories</button>
                        </li>
                        <li class="nav-item" role="presentation">
                            <button class="nav-link" id="brands-tab" data-bs-toggle="tab" data-bs-target="#brands" type="button" role="tab" aria-controls="brands" aria-selected="false">Brands</button>
                        </li>
                    </ul>
                    <div class="tab-content" id="topListsContent">
                        <div class="tab-pane fade show active" id="products" role="tabpanel" aria-labelledby="products-tab">
                            <ul id="topProductsList" class="list-group list-group-flush"></ul>
                        </div>
                        <div class="tab-pane fade" id="categories" role="tabpanel" aria-labelledby="categories-tab">
                            <ul id="topCategoriesList" class="list-group list-group-flush"></ul>
                        </div>
                        <div class="tab-pane fade" id="brands" role="tabpanel" aria-labelledby="brands-tab">
                            <ul id="topBrandsList" class="list-group list-group-flush"></ul>
                        </div>
                    </div>
                </article>
              </div>
            </div>
        </div>
        <!-- <div class="col-xl-4 col-lg-12">
            <div class="card mb-4">
                <article class="card-body">
                    <h5 class="card-title">Revenue Base on Area</h5>
                    <canvas id="myChart2" height="217"></canvas>
                </article>
            </div>
        </div> -->
    </div>
    <div class="card mb-4">
        <header class="card-header">
            <h4 class="card-title">Latest orders</h4>
            <!-- <div class="row align-items-center"> -->
                <!-- <div class="col-md-3 col-12 me-auto mb-md-0 mb-3">
                    <select id="categoryFilter" class="form-select select-nice">
                        <option value="">All Categories</option>
                    </select>
                </div> -->
                <!-- <div class="col-md-2 col-6">
                    <input type="date" id="dateFilter" class="form-control">
                </div>
                <div class="col-md-2 col-6">
                    <select id="statusFilter" class="form-select select-nice">
                        <option value="">All Statuses</option>
                        <option value="Pending">Pending</option>
                        <option value="Confirmed">Confirmed</option>
                        <option value="Processing">Processing</option>
                        <option value="Shipped">Shipped</option>
                        <option value="Delivered">Delivered</option>
                        <option value="Cancelled">Cancelled</option>
                        <option value="Return Requested">Return Requested</option>
                    </select>
                </div> -->
            <!-- </div> -->
        </header>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table align-middle table-nowrap mb-0">
                    <thead class="table-light">
                        <tr>
                            <th class="align-middle" scope="col">Order ID</th>
                            <th class="align-middle" scope="col">Billing Name</th>
                            <th class="align-middle" scope="col">Date</th>
                            <th class="align-middle" scope="col">Total</th>
                            <th class="align-middle" scope="col">Payment Status</th>
                            <th class="align-middle" scope="col">Payment Method</th>
                            <th class="align-middle" scope="col">View Details</th>
                        </tr>
                    </thead>
                    <tbody id="latestOrdersTable">
                        <!-- Latest orders will be dynamically inserted here -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>


    <!-- Order Details Modal -->
<div class="modal fade" id="orderDetailsModal" tabindex="-1" aria-labelledby="orderDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="orderDetailsModalLabel">Order Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <h6>Order Information</h6>
                        <p><strong>Order ID:</strong> <span id="orderId"></span></p>
                        <p><strong>Status:</strong> <span id="orderStatus"></span></p>
                        <p><strong>Date:</strong> <span id="orderDate"></span></p>
                        <p><strong>Total:</strong> <span id="orderTotal"></span></p>
                        <p><strong>Payment Method:</strong> <span id="orderPayment"></span></p>
                    </div>
                    <div class="col-md-6">
                        <h6>Customer Information</h6>
                        <p><strong>Name:</strong> <span id="customerName"></span></p>
                        <p><strong>Email:</strong> <span id="customerEmail"></span></p>
                        <p><strong>Phone:</strong> <span id="customerPhone"></span></p>
                        <p><strong>Shipping Address:</strong> <span id="shippingAddress"></span></p>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-12">
                        <h6>Order Items</h6>
                        <table class="table table-sm table-hover">
                            <thead>
                                <tr>
                                    <th>Product</th>
                                    <th>Quantity</th>
                                    <th>Price</th>
                                    <th>Total</th>
                                </tr>
                            </thead>
                            <tbody id="orderItemsTableBody">
                                <!-- Order items will be dynamically inserted here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


    <div class="pagination-area mt-30 mb-50">
        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-start" id="pagination">
                <!-- Pagination will be dynamically inserted here -->
            </ul>
        </nav>
    </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let salesChart;
    let revenueChart;

    document.addEventListener('DOMContentLoaded', function() {
        setupEventListeners();
        initializeDashboard();
    });

    function initializeDashboard() {
        fetchDashboardData();
        fetchLatestOrders();
    }

    function setupEventListeners() {
        const salesChartFilter = document.getElementById('salesChartFilter');
        if (salesChartFilter) {
            salesChartFilter.addEventListener('change', debounce(handleSalesChartFilterChange, 300));
        }

        const filterInputs = document.querySelectorAll('#categoryFilter, #dateFilter, #statusFilter');
        filterInputs.forEach(input => {
            input.addEventListener('change', debounce(applyFilters, 300));
        });

        const pagination = document.getElementById('pagination');
        if (pagination) {
            pagination.addEventListener('click', handlePaginationClick);
        }

        // Intersection Observer for lazy loading
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    if (entry.target.id === 'salesChart') {
                        fetchSalesData();
                    } else if (entry.target.id === 'topListsContent') {
                        fetchTopLists();
                    }
                    observer.unobserve(entry.target);
                }
            });
        }, {threshold: 0.1});

        const salesChartElem = document.getElementById('salesChart');
        const topListsElem = document.getElementById('topListsContent');
        if (salesChartElem) observer.observe(salesChartElem);
        if (topListsElem) observer.observe(topListsElem);
    }

    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    function fetchDashboardData() {
        axios.get('/admin/dashboard-data')
            .then(function (response) {
                const data = response.data;
                updateDashboardElements(data);
            })
            .catch(function (error) {
                console.error('Error fetching dashboard data:', error);
                showErrorMessage('Failed to load dashboard data. Please try refreshing the page.');
            });
    }

    function updateDashboardElements(data) {
        updateElement('totalRevenue', '₹' + data.totalRevenue.toFixed(2));
        updateElement('totalOrders', data.totalOrders);
        updateElement('totalProducts', data.totalProducts);
        updateElement('totalCategories', data.totalCategories);
        updateElement('monthlyEarning', '₹' + data.monthlyEarning.toFixed(2));
    }

    function updateElement(id, value) {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
        }
    }

    function fetchSalesData(filter = 'yearly') {
        axios.get(`/admin/sales-data?filter=${filter}`)
            .then(function(response) {
                updateSalesChart(response.data);
            })
            .catch(function(error) {
                console.error('Error fetching sales data:', error);
                showErrorMessage('Failed to load sales data. Please try again.');
            });
    }

    function updateSalesChart(salesData) {
        const ctx = document.getElementById('salesChart');
        if (!ctx) return;

        if (salesChart) {
            salesChart.destroy();
        }

        salesChart = new Chart(ctx.getContext('2d'), {
            type: 'line',
            data: {
                labels: salesData.map(item => item.date),
                datasets: [
                    {
                        label: 'Total Revenue',
                        data: salesData.map(item => item.totalRevenue),
                        borderColor: 'rgb(75, 192, 192)',
                        yAxisID: 'y-axis-1',
                    },
                    {
                        label: 'Order Count',
                        data: salesData.map(item => item.orderCount),
                        borderColor: 'rgb(255, 99, 132)',
                        yAxisID: 'y-axis-2',
                    },
                    {
                        label: 'Cumulative Revenue',
                        data: salesData.map(item => item.cumulativeRevenue),
                        borderColor: 'rgb(54, 162, 235)',
                        yAxisID: 'y-axis-1',
                    }
                ]
            },
            options: {
                responsive: true,
                scales: {
                    'y-axis-1': {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        title: {
                            display: true,
                            text: 'Revenue'
                        }
                    },
                    'y-axis-2': {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        title: {
                            display: true,
                            text: 'Order Count'
                        },
                        grid: {
                            drawOnChartArea: false
                        }
                    }
                }
            }
        });

        // displayAdditionalStats(salesData);
    }   

    function displayAdditionalStats(salesData) {
        const statsContainer = document.getElementById('additionalStats');
        if (!statsContainer) return;

        const latestData = salesData[salesData.length - 1];
        const previousWeekData = salesData[salesData.length - 2] || { totalRevenue: 0, orderCount: 0, avgOrderValue: 0 };

        const calculateChange = (current, previous) => {
            if (previous === 0) return 'N/A';
            const change = ((current - previous) / previous) * 100;
            if (!isFinite(change) || Math.abs(change) > 1000) {
            return change > 0 ? '>1000%' : '<1000%';
            }
            return change.toFixed(2);
        };

        const html = `
            <div class="row mt-4">
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Total Revenue</h5>
                            <p class="card-text">₹${latestData.totalRevenue.toFixed(2)}</p>
                            <p class="card-text text-muted">
                                ${calculateChange(latestData.totalRevenue, previousWeekData.totalRevenue)}% from last week
                            </p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Order Count</h5>
                            <p class="card-text">${latestData.orderCount}</p>
                            <p class="card-text text-muted">
                                ${calculateChange(latestData.orderCount, previousWeekData.orderCount)}% from last week
                            </p>
                        </div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Average Order Value</h5>
                            <p class="card-text">₹${latestData.avgOrderValue.toFixed(2)}</p>
                            <p class="card-text text-muted">
                                ${calculateChange(latestData.avgOrderValue, previousWeekData.avgOrderValue)}% from last week
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        `;
        statsContainer.innerHTML = html;
    }

    function fetchTopLists() {
        axios.get('/admin/top-lists')
            .then(function(response) {
                updateTopLists(response.data.topLists);
            })
            .catch(function(error) {
                console.error('Error fetching top lists:', error);
                showErrorMessage('Failed to load top lists. Please try again.');
            });
    }

    function updateTopLists(topLists) {
        updateTopList('topProductsList', topLists.products);
        updateTopList('topCategoriesList', topLists.categories);
        updateTopList('topBrandsList', topLists.brands);
    }

    function updateTopList(elementId, items) {
        const listElement = document.getElementById(elementId);
        if (!listElement || !Array.isArray(items)) return;
        
        listElement.innerHTML = items.map((item, index) => `
            <li class="list-group-item d-flex justify-content-between align-items-center">
                <span>${index + 1}. ${item.name}</span>
                <span class="badge bg-primary rounded-pill">₹${item.revenue.toLocaleString('en-IN', { maximumFractionDigits: 2 })}</span>
            </li>
        `).join('');
    }

    function handleSalesChartFilterChange(event) {
        fetchSalesData(event.target.value);
    }

    function fetchLatestOrders(page = 1, category = '', date = '', status = '') {
        axios.get('/admin/latest-orders', {
            params: { page, category, date, status }
        })
            .then(function (response) {
                const { orders, totalPages, currentPage } = response.data;
                updateLatestOrdersTable(orders);
                updatePagination(totalPages, currentPage);
            })
            .catch(function (error) {
                console.error('Error fetching latest orders:', error);
                showErrorMessage('Failed to load latest orders. Please try again.');
            });
    }

    function updateLatestOrdersTable(orders) {
        const tableBody = document.getElementById('latestOrdersTable');
        if (!tableBody) return;

        tableBody.innerHTML = orders.map(order => `
            <tr>
                <td><a href="#" class="fw-bold">${order.orderId}</a></td>
                <td>${order.billingName}</td>
                <td>${new Date(order.createdAt).toLocaleDateString()}</td>
                <td>₹${order.total.toFixed(2)}</td>
                <td><span class="badge badge-pill badge-soft-${getStatusColor(order.status)}">${order.status}</span></td>
                <td><i class="material-icons md-payment font-xxl text-muted mr-5"></i> ${order.paymentMethod}</td>
                <td><button onclick="fetchOrderItems('${order._id}')" class="btn btn-xs btn-outline-primary">View Items</button></td>
            </tr>
        `).join('');
    }

    function updatePagination(totalPages, currentPage) {
        const pagination = document.getElementById('pagination');
        if (!pagination) return;

        pagination.innerHTML = Array.from({length: totalPages}, (_, i) => i + 1)
            .map(i => `
                <li class="page-item ${i === currentPage ? 'active' : ''}">
                    <a class="page-link" href="#" data-page="${i}">${i}</a>
                </li>
            `).join('');
    }

    function applyFilters() {
        fetchLatestOrders(1);
    }

    function handlePaginationClick(event) {
        event.preventDefault();
        if (event.target.tagName === 'A') {
            const page = event.target.getAttribute('data-page');
            fetchLatestOrders(page);
        }
    }

    function getStatusColor(status) {
        const colors = {
            'Pending': 'warning',
            'Confirmed': 'info',
            'Processing': 'primary',
            'Shipped': 'secondary',
            'Delivered': 'success',
            'Cancelled': 'danger',
            'Return Requested': 'dark'
        };
        return colors[status] || 'light';
    }

    function showErrorMessage(message) {
        swal.fire({
            icon: "error",
            text: message,
            toast: true,
            position: "top-right",
            showConfirmButton: false,
            timerProgressBar: true,
            timer: 3000,
        });
    }

    const fetchOrderItems = async (orderId) => {
  try {
    const response = await axios.get(`/admin/orders/${orderId}`);
    const order = response.data;
    renderOrderDetails(order);
    new bootstrap.Modal(document.getElementById('orderDetailsModal')).show();
  } catch (error) {
    console.error('Error fetching order details:', error);
    showError('Failed to fetch order details. Please try again.');
  }
};

const renderOrderDetails = (order) => {
    if (!order) {
        console.error('Order object is undefined');
        return;
    }

    // Order Information
    document.getElementById('orderId').textContent = order.orderId || 'N/A';
    document.getElementById('orderStatus').textContent = order.status || 'N/A';
    document.getElementById('orderDate').textContent = order.createdAt ? new Date(order.createdAt).toLocaleString() : 'N/A';
    document.getElementById('orderTotal').textContent = order.total ? `₹${(order.total).toFixed(2)}` : 'N/A';
    document.getElementById('orderPayment').textContent = order.paymentMethod || 'N/A';

    // Customer Information
    document.getElementById('customerName').textContent = order.userId ? `${order.userId.firstName} ${order.userId.lastName}` : 'N/A';
    document.getElementById('customerEmail').textContent = order.userId ? order.userId.email : 'N/A';
    document.getElementById('customerPhone').textContent = order.userId ? order.userId.mobile : 'N/A';

    // Shipping Address
    const shippingAddressElement = document.getElementById('shippingAddress');
    if (order.shippingAddress) {
      shippingAddressElement.textContent = `
        ${order.shippingAddress.name}, 
        ${order.shippingAddress.addressType}, 
        ${order.shippingAddress.landMark}, 
        ${order.shippingAddress.city}, 
        ${order.shippingAddress.state} - ${order.shippingAddress.pinCode}, 
        Mobile: ${order.shippingAddress.mobile}
      `;
    } else {
      shippingAddressElement.textContent = 'N/A';
    }

    // Render Order Items
    const orderItemsTableBody = document.getElementById('orderItemsTableBody');
    orderItemsTableBody.innerHTML = '';

    if (Array.isArray(order.products)) {
      order.products.forEach(item => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${item.product.basicInformation?.name || 'N/A'}</td>
          <td>${item.quantity || 'N/A'}</td>
          <td>₹${(item.price).toFixed(2)}</td>
          <td>₹${((item.quantity * item.price)).toFixed(2)}</td>
        `;
        orderItemsTableBody.appendChild(row);
      });
    } else {
      console.error('Order products is not an array:', order.products);
    }
};
</script>


<%- include("../partials/admin/footer") %>