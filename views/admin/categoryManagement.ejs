<%- include("../partials/admin/header") %>
<%- include("../partials/admin/search") %>

<section class="content-main">
    <div class="content-header">
        <div>
            <h2 class="content-title card-title">Categories</h2>
            <p>Add, edit, or delete a category</p>
        </div>
        <div>
            <input type="text" placeholder="Search Categories" class="form-control bg-white" id="searchCategories">
        </div>
    </div>
    <div class="card">
        <div class="card-body">
            <div class="row">
                <div class="col-md-3">
                    <form id="formDataCreateCategory">
                        <div class="mb-4">
                            <label for="categoryName" class="form-label">Name</label>
                            <input type="text" name="cName" placeholder="Type here" class="form-control" id="categoryName">
                            <span id="categoryNameError" class="error"></span>
                        </div>
                        <div class="mb-4">
                            <label for="categoryDescription" class="form-label">Description</label>
                            <textarea name="cDescription" id="categoryDescription" placeholder="Type here" class="form-control"></textarea>
                            <span id="categoryDescriptionError" class="error"></span>
                        </div>
                        <div class="d-grid">
                            <button type="submit" id="createCategoryFormButton" class="btn btn-primary">Create category</button>
                            <button type="button" id="saveChangesCategoryFormButton" class="btn btn-primary" style="display: none;">Save Changes</button>
                        </div>
                    </form>
                </div>
                <div class="col-md-9">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th class="text-center">No</th>
                                    <th>ID</th>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th class="text-center">Action</th>
                                </tr>
                            </thead>
                            <tbody id="categoriesTbody">
                                <!-- Category rows will be dynamically inserted here -->
                            </tbody>
                        </table>
                    </div>
                    <div class="d-flex justify-content-between align-items-center mt-4">
                        <div id="category-count"></div>
                        <nav aria-label="Category pagination">
                            <ul class="pagination" id="category-pagination"></ul>
                        </nav>
                    </div>
                </div> <!-- .col// -->
            </div> <!-- .row // -->
        </div> <!-- card body .// -->
    </div> <!-- card .// -->
</section> <!-- content-main end// -->

<%- include("../partials/admin/footer") %>

<script>
    class CategoryManager {
    constructor() {
        this.currentPage = 1;
        this.itemsPerPage = 10;
        this.init();
    }

    init() {
        this.fetchCategories();
        this.setupEventListeners();
    }

    setupEventListeners() {

        const createCategoryForm = document.getElementById("formDataCreateCategory");
        createCategoryForm.addEventListener("submit", (e) => this.handleCreateCategory(e));

        document.getElementById('categoriesTbody').addEventListener('click', (e) => {
            if (e.target.classList.contains('edit-category')) {
                this.editCategory(e.target.dataset.id);
            } else if (e.target.classList.contains('delete-category')) {
                this.softDeleteCategory(e.target.dataset.id);
            }
        });
    }

    async fetchCategories() {
        try {
            const response = await axios.get(`/admin/categories?page=${this.currentPage}&limit=${this.itemsPerPage}`);
            const data = response.data;
            this.updateCategoryTable(data.categories);
            this.updatePagination(data.currentPage, data.totalPages, data.totalCategories);
        } catch (error) {
            console.error('Error fetching categories:', error);
            Swal.fire({
                title: "Error!",
                text: "Failed to load categories. Please try again.",
                icon: "error",
            });
        }
    }

    updateCategoryTable(categories) {
        const tbody = document.getElementById('categoriesTbody');
        tbody.innerHTML = '';
        categories.forEach((category, index) => {
            const row = `
                <tr>
                    <td class="text-center">${(this.currentPage - 1) * this.itemsPerPage + index + 1}</td>
                    <td>${category._id}</td>
                    <td>${category.name}</td>
                    <td>${category.description}</td>
                    <td class="text-center">
                        <button class="btn btn-sm btn-outline-secondary edit-category" data-id="${category._id}">Edit</button>
                        <button class="btn btn-sm ${category.isBlocked ? 'btn-success' : 'btn-danger'} delete-category" data-id="${category._id}">
                            ${category.isBlocked ? 'List' : 'Unlist'}
                        </button>
                    </td>
                </tr>
            `;
            tbody.innerHTML += row;
        });
    }

    updatePagination(currentPage, totalPages, totalCategories) {
        const pagination = document.getElementById('category-pagination');
        const categoryCount = document.getElementById('category-count');
        pagination.innerHTML = '';
        categoryCount.textContent = `Showing ${(currentPage - 1) * this.itemsPerPage + 1} to ${Math.min(currentPage * this.itemsPerPage, totalCategories)} of ${totalCategories} categories`;

        this.addPaginationButton(pagination, currentPage - 1, '«', currentPage > 1);

        for (let i = 1; i <= totalPages; i++) {
            this.addPaginationButton(pagination, i, i, true, i === currentPage);
        }

        this.addPaginationButton(pagination, currentPage + 1, '»', currentPage < totalPages);
    }

    addPaginationButton(container, page, text, isEnabled, isActive = false) {
        const li = document.createElement('li');
        li.className = `page-item ${isActive ? 'active' : ''} ${!isEnabled ? 'disabled' : ''}`;
        const a = document.createElement('a');
        a.className = 'page-link';
        a.href = '#';
        a.textContent = text;
        if (isEnabled) {
            a.addEventListener('click', (e) => {
                e.preventDefault();
                this.currentPage = page;
                this.fetchCategories();
            });
        }
        li.appendChild(a);
        container.appendChild(li);
    }

    async handleCreateCategory(e) {
        e.preventDefault();
        const formData = {
            name: document.getElementById("categoryName").value.trim(),
            description: document.getElementById("categoryDescription").value.trim(),
        };

        try {
            const response = await axios.post("/admin/categories", formData);
            Swal.fire({
                title: "Success!",
                text: "Category created successfully.",
                icon: "success",
            });
            this.fetchCategories();
            e.target.reset();
        } catch (error) {
            console.error("Error creating category:", error);
            Swal.fire({
                title: "Error!",
                text: "There was a problem creating the category.",
                icon: "error",
            });
        }
    }

    async editCategory(categoryId) {
        try {
            const response = await axios.get(`/admin/categories/${categoryId}`);
            const category = response.data;
            document.getElementById("categoryName").value = category.name;
            document.getElementById("categoryDescription").value = category.description;
            document.getElementById("createCategoryFormButton").style.display = "none";
            document.getElementById("saveChangesCategoryFormButton").style.display = "block";
            document.getElementById("saveChangesCategoryFormButton").onclick = () => this.updateCategory(categoryId);
        } catch (error) {
            console.error("Error fetching category details:", error);
            Swal.fire({
                title: "Error!",
                text: "Failed to load category details. Please try again.",
                icon: "error",
            });
        }
    }

    async updateCategory(categoryId) {
        const formData = {
            name: document.getElementById("categoryName").value.trim(),
            description: document.getElementById("categoryDescription").value.trim(),
        };

        try {
            const response = await axios.put(`/admin/categories/${categoryId}`, formData);
            Swal.fire({
                title: "Success!",
                text: "Category updated successfully.",
                icon: "success",
            });
            this.fetchCategories();
            document.getElementById("formDataCreateCategory").reset();
            document.getElementById("createCategoryFormButton").style.display = "block";
            document.getElementById("saveChangesCategoryFormButton").style.display = "none";
        } catch (error) {
            console.error("Error updating category:", error);
            Swal.fire({
                title: "Error!",
                text: "There was a problem updating the category.",
                icon: "error",
            });
        }
    }

    async softDeleteCategory(categoryId) {
        const deleteButton = document.querySelector(`.delete-category[data-id="${categoryId}"]`);
        const isDeleting = deleteButton.classList.contains("btn-danger");

        const result = await Swal.fire({
            title: isDeleting ? "Are you sure you want to unlist this category?" : "Are you sure you want to list this category?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: isDeleting ? "Yes, Unlist it!" : "Yes, List it!",
        });

        if (result.isConfirmed) {
            try {
                const response = await axios.patch(`/admin/categories?categoryId=${categoryId}`);
                const data = response.data;
                if (data.isBlocked) {
                    deleteButton.classList.remove("btn-danger");
                    deleteButton.classList.add("btn-success");
                    deleteButton.textContent = "List";
                    Swal.fire({
                        title: "Unlisted!",
                        text: "Successfully unlisted category.",
                        icon: "success",
                    });
                } else {
                    deleteButton.classList.remove("btn-success");
                    deleteButton.classList.add("btn-danger");
                    deleteButton.textContent = "Unlist";
                    Swal.fire({
                        title: "Listed!",
                        text: "Category has been listed.",
                        icon: "success",
                    });
                }
                this.fetchCategories();
            } catch (error) {
                console.error("Error updating category status:", error);
                Swal.fire({
                    title: "Error!",
                    text: "There was a problem updating the category.",
                    icon: "error",
                });
            }
        }
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new CategoryManager();
});

</script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
