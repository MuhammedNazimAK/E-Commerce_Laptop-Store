<%- include('../partials/admin/header') %>
<%- include('../partials/admin/search') %>

<section class="content-main">
  <div class="content-header">
    <h2 class="content-title">Product Offers</h2>
    <div>
      <a href="/admin/add-product-offer" class="btn btn-primary">Add New Offer</a>
    </div>
  </div>

  <div class="card mb-4">
    <div class="card-body">
      <div class="mb-3">
        <label for="filterStatus" class="form-label">Filter by Status:</label>
        <select id="filterStatus" class="form-select">
          <option value="all">All</option>
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
        </select>
      </div>
      <div class="mb-3">
        <label for="filterType" class="form-label">Filter by Type:</label>
        <select id="filterType" class="form-select">
          <option value="all">All</option>
          <option value="default">Default</option>
          <option value="individual">Individual</option>
        </select>
      </div>
      <div class="table-responsive">
        <table class="table table-hover">
          <thead>
            <tr>
              <th>ID</th>
              <th>Offer Name</th>
              <th>Product</th>
              <th>Discount</th>
              <th>Start Date</th>
              <th>End Date</th>
              <th>Status</th>
              <th>Type</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="productOfferTableBody">
            <!-- Product offers will be dynamically inserted here -->
          </tbody>
        </table>
      </div>
      <div id="pagination" class="mt-3">
        <!-- Pagination controls will be inserted here -->
      </div>
    </div>
  </div>

  <div class="modal fade" id="editOfferModal" tabindex="-1" aria-labelledby="editOfferModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editOfferModalLabel">Edit Product Offer</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <!-- Form fields will be dynamically inserted here -->
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" id="saveOfferChanges">Save changes</button>
        </div>
      </div>
    </div>
  </div>

</section>

<%- include('../partials/admin/footer') %>

<script>
let allOffers = [];
const itemsPerPage = 10;
let currentPage = 1;

document.addEventListener('DOMContentLoaded', async () => {
  await loadOffers();
  
  document.getElementById('filterStatus').addEventListener('change', applyFilters);
  document.getElementById('filterType').addEventListener('change', applyFilters);
});

async function loadOffers() {
  try {
    const response = await axios.get('/admin/product-offers');
    allOffers = response.data.offers;
    applyFilters();
  } catch (error) {
    console.error('Error fetching product offers:', error);
    showErrorSwal('Failed to load product offers');
  }
}

function applyFilters() {
  const statusFilter = document.getElementById('filterStatus').value;
  const typeFilter = document.getElementById('filterType').value;

  const filteredOffers = allOffers.filter(offer => {
    const statusMatch = statusFilter === 'all' || 
      (statusFilter === 'active' && offer.isActive) || 
      (statusFilter === 'inactive' && !offer.isActive);
    const typeMatch = typeFilter === 'all' || 
      (typeFilter === 'default' && offer.isDefault) || 
      (typeFilter === 'individual' && !offer.isDefault);
    return statusMatch && typeMatch;
  });

  displayOffers(filteredOffers);
}

function displayOffers(offers) {
  const tableBody = document.getElementById('productOfferTableBody');
  tableBody.innerHTML = '';

  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const pageOffers = offers.slice(startIndex, endIndex);

  pageOffers.forEach(offer => {
    const row = document.createElement('tr');
    row.innerHTML = `
      <td>${offer._id}</td>
      <td>${offer.offerName}</td>
      <td>${offer.isDefault ? 'All Products' : offer.product ? offer.product.basicInformation.name : 'N/A'}</td>
      <td>${offer.discountPercentage}%</td>
      <td>${new Date(offer.startDate).toLocaleDateString()}</td>
      <td>${new Date(offer.endDate).toLocaleDateString()}</td>
      <td>${offer.isActive ? '<span class="badge bg-success">Active</span>' : '<span class="badge bg-danger">Inactive</span>'}</td>
      <td>${offer.isDefault ? '<span class="badge bg-info">Default</span>' : '<span class="badge bg-warning">Individual</span>'}</td>
      <td>
        <button class="btn btn-sm btn-outline-primary edit-offer" data-id="${offer._id}">Edit</button>
        <button class="btn btn-sm btn-outline-danger delete-offer" data-id="${offer._id}">Delete</button>
      </td>
    `;
    tableBody.appendChild(row);
  });

  setupPagination(offers.length);
  addEventListeners();
}

function setupPagination(totalItems) {
  const totalPages = Math.ceil(totalItems / itemsPerPage);
  const paginationElement = document.getElementById('pagination');
  let paginationHtml = '';

  for (let i = 1; i <= totalPages; i++) {
    paginationHtml += `<button class="btn btn-sm ${i === currentPage ? 'btn-primary' : 'btn-outline-primary'} mx-1" onclick="changePage(${i})">${i}</button>`;
  }

  paginationElement.innerHTML = paginationHtml;
}

function changePage(page) {
  currentPage = page;
  applyFilters();
}

function addEventListeners() {
  document.querySelectorAll('.edit-offer').forEach(button => {
    button.addEventListener('click', (e) => editOffer(e.target.dataset.id));
  });

  document.querySelectorAll('.delete-offer').forEach(button => {
    button.addEventListener('click', (e) => deleteOffer(e.target.dataset.id));
  });
}

async function editOffer(offerId) {
  try {
    const response = await axios.get(`/admin/edit-product-offer/${offerId}`);
    const offer = response.data.offer;
    const products = response.data.products;
    
    const modalBody = document.querySelector('#editOfferModal .modal-body');
    modalBody.innerHTML = `
      <form id="editOfferForm">
        <input type="hidden" id="editOfferId" value="${offer._id}">
        <div class="mb-3">
          <label for="editOfferName" class="form-label">Offer Name</label>
          <input type="text" class="form-control" id="editOfferName" value="${offer.offerName}" required>
        </div>
        <div class="mb-3">
          <label for="editDiscountPercentage" class="form-label">Discount Percentage</label>
          <input type="number" class="form-control" id="editDiscountPercentage" value="${offer.discountPercentage}" min="0" max="100" required>
        </div>
        <div class="mb-3">
          <label for="editStartDate" class="form-label">Start Date</label>
          <input type="date" class="form-control" id="editStartDate" value="${offer.startDate.split('T')[0]}" required>
        </div>
        <div class="mb-3">
          <label for="editEndDate" class="form-label">End Date</label>
          <input type="date" class="form-control" id="editEndDate" value="${offer.endDate.split('T')[0]}" required>
        </div>
        <div class="mb-3 form-check">
          <input type="checkbox" class="form-check-input" id="editIsActive" ${offer.isActive ? 'checked' : ''}>
          <label class="form-check-label" for="editIsActive">Is Active</label>
        </div>
        <div class="mb-3 form-check">
          <input type="checkbox" class="form-check-input" id="editIsDefault" ${offer.isDefault ? 'checked' : ''}>
          <label class="form-check-label" for="editIsDefault">Is Default Offer</label>
        </div>
        <div class="mb-3" id="productSelection" ${offer.isDefault ? 'style="display:none;"' : ''}>
          <label for="editProduct" class="form-label">Product</label>
          <select class="form-select" id="editProduct" ${offer.isDefault ? 'disabled' : ''}>
            ${products.map(p => `<option value="${p._id}" ${offer.product && offer.product._id == p._id ? 'selected' : ''}>${p.basicInformation.name}</option>`).join('')}
          </select>
        </div>
      </form>
    `;

    document.getElementById('editIsDefault').addEventListener('change', function() {
      const productSelection = document.getElementById('productSelection');
      const editProduct = document.getElementById('editProduct');
      if (this.checked) {
        productSelection.style.display = 'none';
        editProduct.disabled = true;
      } else {
        productSelection.style.display = 'block';
        editProduct.disabled = false;
      }
    });

    const editModal = new bootstrap.Modal(document.getElementById('editOfferModal'));
    editModal.show();

    document.getElementById('saveOfferChanges').onclick = saveOfferChanges;
  } catch (error) {
    console.error('Error fetching offer details:', error);
    showErrorSwal('Failed to load offer details');
  }
}

async function saveOfferChanges() {
  const offerId = document.getElementById('editOfferId').value;
  const offerData = {
    offerName: document.getElementById('editOfferName').value,
    discountPercentage: document.getElementById('editDiscountPercentage').value,
    startDate: document.getElementById('editStartDate').value,
    endDate: document.getElementById('editEndDate').value,
    isActive: document.getElementById('editIsActive').checked,
    isDefault: document.getElementById('editIsDefault').checked,
    product: document.getElementById('editProduct').value
  };

  try {
    const response = await axios.put(`/admin/update-product-offer/${offerId}`, offerData);
    if (response.data.message) {
      showSuccessSwal('Product offer updated successfully');
      const editModal = bootstrap.Modal.getInstance(document.getElementById('editOfferModal'));
      editModal.hide();
      await loadOffers();
    }
  } catch (error) {
    console.error('Error updating product offer:', error);
    if (error.response && error.response.data && error.response.data.message) {
      showErrorSwal(error.response.data.message);
    } else {
      showErrorSwal('Failed to update product offer. Please try again.');
    }
  }
}

async function deleteOffer(offerId) {
  try {
    const result = await Swal.fire({
      title: 'Are you sure?',
      text: "You won't be able to revert this!",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#3085d6',
      cancelButtonColor: '#d33',
      confirmButtonText: 'Yes, delete it!'
    });

    if (result.isConfirmed) {
      const response = await axios.delete(`/admin/delete-product-offer/${offerId}`);
      if (response.data.message) {
        showSuccessSwal('Product offer deleted successfully');
        await loadOffers();
      }
    }
  } catch (error) {
    console.error('Error deleting product offer:', error);
    showErrorSwal('Failed to delete product offer');
  }
}

function showLoading() {
  Swal.fire({
    title: 'Loading...',
    allowOutsideClick: false,
    didOpen: () => {
      Swal.showLoading();
    }
  });
}

function hideLoading() {
  Swal.close();
}

function showSuccessSwal(message) {
  Swal.fire({
    icon: "success",
    text: message,
    toast: true,
    position: "top-right",
    showConfirmButton: false,
    timerProgressBar: true,
    timer: 3000,
  });
}

function showErrorSwal(message) {
  Swal.fire({
    icon: "error",
    text: message,
    toast: true,
    position: "top-right",
    showConfirmButton: false,
    timerProgressBar: true,
    timer: 3000,
  });
}

</script>
